ListDir
ListDir('PEDMAP','/data/Syngenta',T,'kamichels')
setwd('/users/dustin/documents/pyplant')
source('pROC_curvegen.r')
source('pROC_curvegen.r')
source('pROC_curvegen.r')
source('pROC_curvegen.r')
source('pROC_curvegen.r')
source('pROC_curvegen.r')
roc
df <- data.frame(sp=qnorm(roc$sp * ifelse(roc$percent, 1/100, 1)), se=qnorm(roc$se * ifelse(roc$percent, 1/100, 1)))#
  df <- df[apply(df, 1, function(x) all(is.finite(x))),]
rocobj$se
rocobj1$se
qnorm(rocobj1$se*(1/100))
r <- rocobj1
r$percent
se <- r$se * ifelse(r$percent,1/100,1)
se
sp <- r$sp * ifelse(r$percent,1/100,1)
sp
seq <- qnorm(se)
spq <- qnorm(sp)
seq
spq
fit <- lm(se~sp)
fit
plot(fit)
quartz()
abline(fit)
plot(seq,spq)
plot(spq,seq,type='')
plot(spq,seq,type='l')
plot(seq,spq,type='l')
plot(x=sp,y=se,type='l')
plot(x=sp,y=1-se,type='l')
plot(x=1-sp,y=se,type='l')
abline(fit)
points(fit$fitted.values)
plot(x=1-sp,y=se,type='l')
fit$fitted.values
fit$fitted.values
plot(fit$fitted.values)
df <- data.frame(sp=qnorm(r$sp * ifelse(r$percent, 1/100, 1)), se=qnorm(r$se * ifelse(r$percent, 1/100, 1)))
df
df <- df[apply(df, 1, function(x) all(is.finite(x))),]
df
model <- lm(sp~se, df)
model
se <- qnorm(seq(0, 1, 1/(n-1)))
n <- length(df)
n
n <- nrow(df)
n
se <- qnorm(seq(0, 1, 1/(n-1)))
se
sp <- predict(model, data.frame(se))
sp
list(sensitivities = pnorm(se) * ifelse(roc$percent, 100, 1),#
              specificities = pnorm(sp) * ifelse(roc$percent, 100, 1),#
              model = model)
list(sensitivities = pnorm(se) * ifelse(r$percent, 100, 1),#
              specificities = pnorm(sp) * ifelse(roc$percent, 100, 1),#
              model = model)
list(sensitivities = pnorm(se) * ifelse(r$percent, 100, 1),#
              specificities = pnorm(sp) * ifelse(roc$percent, 100, 1),#
              model = model)
sens <- pnorm(se)
sens
list(sensitivities = pnorm(se) * ifelse(r$percent, 100, 1),#
              specificities = pnorm(sp) * ifelse(roc$percent, 100, 1),#
              model = model)
sens <- pnorm(se) * ifelse(r$percent,100,1)
spec <- pnrom(sp) * ifelse(r$percent,100,1)
spec <- pnorm(sp) * ifelse(r$percent,100,1)
model
sens
plot(x=spec,y=sens)
plot(x=1-spec,y=sens)
sim10 <- read.csv(file='test.txt',header=T)
sim10 <- read.csv(file='test.txt',header=T)
sim10 <- read.csv(file='sim10.txt',header=T)
head(sim10)
sim10 <- read.csv(file='sim10.txt',header=T)#
known_truths <- c('csu303', 'gpm551', 'AY112215', 'IDP2516', 'umc1803', 'umc1174', 'gpm249b', 'php15024')#
known_effects <- c(2,2,3,3,5,5,7,7)#
#
sim10$truth <- ifelse(sim10$SNP %in% known_truths, 'Pos', 'Neg')#
#
TPR <- function(tab) {#
  if (nrow(tab)==2 & ncol(tab)==2) {#
    TP <- tab['Test Pos','Pos']#
    TotalTruth <- sum(tab[,'Pos'])#
    return(TP/TotalTruth)#
  }#
  else {#
    return(NA)#
  }#
}#
#
TNR <- function(tab) {#
  if (nrow(tab)==2 & ncol(tab)==2) {#
    TN <- tab['Test Neg','Neg']#
    TotalFalse <- sum(tab[,'Neg'])#
    return(TN/TotalFalse)#
  }#
  else {#
    return(NA)#
  }#
}#
#
holder <- matrix(nrow=length(myseq),ncol=2)#
myseq <- sim10$P[order(sim10$P)]
Title: Build ROC Curve for Simulation10-Simmons Datasets#
## Author: Dustin Landers#
#
sim10 <- read.csv(file='sim10.txt',header=T)#
known_truths <- c('csu303', 'gpm551', 'AY112215', 'IDP2516', 'umc1803', 'umc1174', 'gpm249b', 'php15024')#
known_effects <- c(2,2,3,3,5,5,7,7)#
#
sim10$truth <- ifelse(sim10$SNP %in% known_truths, 'Pos', 'Neg')#
#
TPR <- function(tab) {#
  if (nrow(tab)==2 & ncol(tab)==2) {#
    TP <- tab['Test Pos','Pos']#
    TotalTruth <- sum(tab[,'Pos'])#
    return(TP/TotalTruth)#
  }#
  else {#
    return(NA)#
  }#
}#
#
TNR <- function(tab) {#
  if (nrow(tab)==2 & ncol(tab)==2) {#
    TN <- tab['Test Neg','Neg']#
    TotalFalse <- sum(tab[,'Neg'])#
    return(TN/TotalFalse)#
  }#
  else {#
    return(NA)#
  }#
}#
#
myseq <- sim10$P[order(sim10$P)]#
holder <- matrix(nrow=length(myseq),ncol=2)
holder
myseq
for (i in 1:length(myseq)) {#
  #print(i)#
  sim10$test <- ifelse(sim10$P < myseq[i],'Test Pos','Test Neg')#
  mytab <- table(sim10$test,sim10$truth)#
  holder[i,1] <- TPR(mytab)#
  holder[i,2] <- 1-TNR(mytab)#
}
holder
plot(x=1-holder[,2],y=holder[,1])
plot(x=holder[,2],y=holder[,1])
plot(x=holder[,2],y=holder[,1],type='l')
holder_smooth <- qnorm(holder)
holder_smooth
source('roc.r')
plot(x=holder[,1],y=holder[,2],xlab='FPR',ylab='TRP',main='Simulation10-Simmons ROC Curve',type='l')
all(holder)
holder_smooth <- ifelse(apply(holder_smooth, 1, function(x) all(is.finite(x))))
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]
holder_smooth
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])
fit
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])#
x <- seq(0,1,1/(n-1))#
y <- predict(fit, data.frame(x))#
plot(x,y)
y
x
x
n
source('roc.r')
source('roc.r')
n
length(y)
n
source('roc.r')
source('roc.r')
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])#
n <- nrow(holder_smooth)#
x <- seq(0,1,1/(n-1))#
y <- predict(fit, data.frame(x))#
lines(x,y)
plot(x=holder[,1],y=holder[,2],xlab='FPR',ylab='TRP',main='Simulation10-Simmons ROC Curve',type='l')#
#
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])#
n <- nrow(holder_smooth)#
x <- seq(0,1,1/(n-1))#
y <- predict(fit, data.frame(x))#
lines(x,y)
plot(x=holder[,1],y=holder[,2],xlab='FPR',ylab='TRP',main='Simulation10-Simmons ROC Curve',type='l')#
#
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,1]~holder_smooth[,2])#
n <- nrow(holder_smooth)#
x <- seq(0,1,1/(n-1))#
y <- predict(fit, data.frame(x))#
lines(x,y)
plot(x=holder[,1],y=holder[,2],xlab='FPR',ylab='TRP',main='Simulation10-Simmons ROC Curve',type='l')#
#
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])#
n <- nrow(holder_smooth)#
x <- seq(0,1,1/(n-1))*100#
y <- predict(fit, data.frame(x))*100#
lines(x,y)
plot(x=holder[,1],y=holder[,2],xlab='FPR',ylab='TRP',main='Simulation10-Simmons ROC Curve',type='l')#
#
holder_smooth <- qnorm(holder)#
holder_smooth <- holder_smooth[apply(holder_smooth, 1, function(x) all(is.finite(x))),]#
fit <- lm(holder_smooth[,2]~holder_smooth[,1])#
n <- nrow(holder_smooth)#
x <- seq(0,1,1/(n-1))#
y <- predict(fit, data.frame(x))#
lines(pnorm(x),pnorm(y))
source('roc.r')
source('roc.r')
source('roc.r')
source('pROC_curvegen.r')
source('roc.r')
source('roc.r')
source('roc.r')
source('roc.r')
qnorm(2)
qnorm(0.3)
qnorm(0.95)
source('roc.r')
source('roc.r')
source('roc.r')
source('roc.r')
lines(0,1)
lines(1,1)
lines(c(1,1))
lines(c(0,1))
lines(x=1,1)
lines(x=0,y=1)
lines(0,0)
abline(0,1)
abline(0,1,lty=2)
source('roc.r')
source('roc.r')
holderq <- qnorm(holder)
holderq
holderq <- holderq[apply(holderq,1,function(x) all(isfinite(x)),]
holderq <- apply(holderq,1,function(x) all(isfinite(x))
)
holderq
holderq <- holderq[apply(holderq, 1, function(x) all(is.finite(x))),]
holderq
plot(holderq[,1],holderq[,2])
plot(holderq[,1],holderq[,2],type='l')
fit <- lm(holderq[,2]~holderq[,2])
fit <- lm(holderq[,2]~holderq[,1])
abline(fit)
points(pnorm(fit$fitted.values))
plot(fit)
fit$fitted.values
x <- pnorm(seq(0,1,nrow(holderq)-1))
x
x <- pnorm(seq(0,1,nrow(holderq)))
x
x <- seq(0,1,1/nrow(holderq))
x
x <- seq(0,1,1/nrow(holderq)-1)
x <- seq(0,1,(1/nrow(holderq))-1)
x <- seq(0,1,(1/nrow(holderq)-1))
x <- seq(0,1,1/(nrow(holderq)-1)
)
x
plot(x,predict(fit,x))
y <- predict(fit,x)
predict(fit)
y <- predict(fit,data.frame(x))
y
plot(x,y)
plot(x,pnorm(y))
plot(x,pnorm(y),lty=3)
plot(x,pnorm(y),lty=16)
plot(x,pnorm(y))
y <- predict(fit,data.frame(x))
plot(x,y)
plot(holderq[,1],holderq[,2])
points(x,y)
plot(holder[,1],holder[,2])
points(x,y)
points(x,pnorm(y))
points(pnorm(x),pnorm(y))
plot(holder[,1],holder[,2])
plot(holder[,1],holder[,2],type='l')
abline(0,1,lty=6)
abline(0,1,lty=3)
abline(0,1,lty=2)
plot(holder[,1],holder[,2],type='l')
abline(0,1,lty=3)
abline(0,1,lty=4)
plot(x,y)
abline(0,1,lty=3)
plot(holder[,1],holder[,2],type='l')
abline(0,1,lty=3)
abline(0,1,lty=4)
plot(holder[,1],holder[,2],type='l')
abline(0,1,lty=4)
holderq <- pnorm(holder)#
holderq <- holderq[apply(holderq, 1, function(x) all(is.finite(x))),]
holderq
pnorm(2.1)
fit <- lm(holderq[,2]~holderq[,1])
x
y <- predict(fit,data.frame(x))
x
y
x <- seq(0,1,1/(nrow(holderq)-1)
)
y <- predict(fit,data.frame(x))
plot(x,y)
plot(holderq[,1],holderq[,2],type='l')
points(x,y)
points(qnorm(x),qnorm(y))
plot(holder[,1],holder[,2],type='l')
points(x,y)
point(qnorm(x),qnorm(y))
points(qnorm(x),qnorm(y))
plot(holder[,1],holder[,2],type='l')
abline(0,1,lty=4)
abline(0,1,lty=3)
qnorm(0.8)
holder
holderq <- pnorm(holder)#
holderq <- holderq[apply(holderq, 1, function(x) all(is.finite(x))),]
holderq
holderq <- qnorm(holder)#
holderq <- holderq[apply(holderq, 1, function(x) all(is.finite(x))),]
holderq
fit <- lm(holderq[,2]~holderq[,1])
plot(fit)
plot(x,fit$fitted.values)
plot(fit$fitted.values)
fit <- lm(holderq[,2]~holderq[,1])
plot(holder[,1],holder[,2])
abline(fit)
plot(holder[,1],holder[,2],type='l')
plot(holder[,1],holder[,2])
holderq
fit <- lm(holderq[,2]~holderq[,1])
fit
abline(fit)
x <- seq(0,1,(1/(nrow(holderq)-1)))
x
z
x <- seq(0,1,(1/(nrow(holderq)-1)))
x
xp <- pnorm(x)
xp
y <- predict(fit,data.frame(x))
plot(x,y)
plot(xp,y)
plot(x,y)
plot(x,pnorm(y))
